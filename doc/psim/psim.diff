diff -rubB gdb-7.3.1.org/sim/ppc/emul_chirp.c gdb-7.3.1/sim/ppc/emul_chirp.c
--- gdb-7.3.1.org/sim/ppc/emul_chirp.c	2003-06-22 15:03:40.000000000 +0200
+++ gdb-7.3.1/sim/ppc/emul_chirp.c	2012-01-14 10:48:33.701200864 +0100
@@ -1880,6 +1880,11 @@
 	       (unsigned long)chirp->sizeof_stack);
     tree_parse(node, "./wimg %d", 0x7);
     tree_parse(node, "./pp %d", 0x2);
+    node = tree_parse(root, "/cpus/cpu@0");
+    tree_parse(node, "./translations 0x%lx 0x%lx 0x%0lx 0x%0lx 0x%0lx",
+	       (unsigned long)chirp->code_va, (unsigned long)chirp->sizeof_code,
+	       (unsigned long)chirp->code_ra, 0); 
+    node = tree_parse(root, "/chosen/mmu */cpus/cpu@0");
   }
 
   /* map in the chrp openboot callback code */
diff -rubB gdb-7.3.1.org/sim/ppc/hw_cpu.c gdb-7.3.1/sim/ppc/hw_cpu.c
--- gdb-7.3.1.org/sim/ppc/hw_cpu.c	1999-04-16 03:35:09.000000000 +0200
+++ gdb-7.3.1/sim/ppc/hw_cpu.c	2012-01-14 10:50:27.125199509 +0100
@@ -110,6 +110,8 @@
 {
   hw_cpu_device *hw_cpu = (hw_cpu_device*)device_data(me);
   /* populate the node with properties */
+  device_add_string_property(me, "device_type", "cpu");
+  device_add_integer_property(me, "timebase-frequency", 0x00fe502a);
   /* clear our data */
   memset(hw_cpu, 0x0, sizeof(hw_cpu_device));
   hw_cpu->cpu_nr = device_find_integer_property(me, "cpu-nr");
@@ -148,6 +150,44 @@
   }
 }
 
+/* An instance of the cpu */
+  
+typedef struct _hw_cpu_instance {
+  unsigned_word pos;
+  hw_cpu_device *cpu;
+  device *me;
+} hw_cpu_instance;
+
+static void
+hw_cpu_instance_delete(device_instance *instance)
+{
+  hw_cpu_instance *data = device_instance_data(instance);
+  free(data);
+}
+
+static const device_instance_callbacks hw_cpu_instance_callbacks = {
+  hw_cpu_instance_delete,
+  NULL,
+  NULL,
+  NULL,
+};
+
+static device_instance *
+hw_cpu_create_instance(device *me,    
+                          const char *path,
+                          const char *args)
+{
+  hw_cpu_device *cpu = device_data(me);
+  hw_cpu_instance *data = ZALLOC(hw_cpu_instance);
+  data->cpu = cpu;
+  data->me = me;
+  return device_create_instance_from(me, NULL,
+                                     data,
+                                     path, args,
+                                     &hw_cpu_instance_callbacks);
+}
+
+
 
 static device_callbacks const hw_cpu_callbacks = {
   { hw_cpu_init_address, }, /* init */
@@ -156,6 +196,7 @@
   { NULL, }, /* DMA */
   { hw_cpu_interrupt_event, NULL, hw_cpu_interrupt_ports }, /* interrupts */
   { NULL, NULL, },
+  hw_cpu_create_instance,
 };
 
 const device_descriptor hw_cpu_device_descriptor[] = {
