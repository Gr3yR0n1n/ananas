#!/bin/sh
#
# This file generates include files and source code for the system calls. It
# uses 'awk' to warp syscalls.in into whatever form we need.
#
# XXX This code is ugly, mostly due to my awk(1) skills lacking...
#
AWK=awk

if [ "$4" == "" ]; then
	echo "usage: gen_syscalls.sh syscall.in libc/kern/syscall.h include/syscalls.h kern/syscalls.inc.c"
	exit
fi

#
# for the userland part, generate wrapper functions that call the syscall, i.e.
#
#   1234 { void foo(int a, int b, int c)
#
# becomes
#
#   void foo(int a, int b, int c) { SYSCALL3(1234); }
#
$AWK '
	BEGIN {
		print "/* This file is automatically generated by gen_syscalls.sh - do not edit! */"
	}
	/^#/ { next; }
	/^[0-9]+/ {
		FUNCNAME=substr($0, index($0, "{") + 1, index($0, ";") - index($0, "{") - 1)
		if (index(FUNCNAME, ",") == 0)
			print FUNCNAME " { SYSCALL0(" $1 "); }"
		else
			print FUNCNAME " { SYSCALL" gsub(",", "!", FUNCNAME) + 1 "(" $1 "); }"
	}
' < $1 > $2

#
# for the kernel, part 1, generate prototypes. i.e.
#
#   1234 { void foo(int a, int b, int c)
#
# becomes
#
#   #define SYSCALL_foo 1234
#   void sys_foo(int a, int b, int c);
#
$AWK '
	BEGIN { print "/* This file is automatically generated by gen_syscalls.sh - do not edit! */"; }
	/^#/ { next; }
	/^[0-9]+/ {
		print "#define SYSCALL_" substr($4, 0, index($4, "(") - 1) " "$1;
		print $3 " sys_" substr($4, 0, index($4, "(") - 1)  substr($0, index($0, "("), index($0, "}") - index($0, "(") - 1)
	}
' < $1 > $3

#
#
# for the kernel, part 2, generate function calls. i.e.
#
#   1234 { void foo(int a, int b, int c); }
#   4321 { void bar(int a); }
#
# becomes
#
#   case 1234: sys_foo(a->arg1, a->arg2, a->arg3); return;
#   case 4321: return sys_bar(a->arg1);
#

$AWK '
	/^#/ { next; }
	/^[0-9]+/ {
		FUNC=substr($0, index($0, "{") + 1, index($0, ";") - index($0, "{") - 1)
		gsub(/^[ \t]+/, "", FUNC)
		if (index(FUNC, ",") == 0)
			NARGS=0
		else
			NARGS=gsub(",", ",", FUNC) + 1
		FUNCNAME=substr(FUNC, length($3) + 1)
		FUNCNAME=substr(FUNCNAME, 1, index(FUNCNAME, "(") - 1)
		gsub(/^[ \t]+/, "", FUNCNAME)

		ARGS=""
		for (a = 0; a < NARGS; a++) ARGS = ARGS",a->arg" a+1
		gsub(/^,/, "", ARGS)

		print "case "$1": "
		if ($3 == "void")
			print "\tsys_" FUNCNAME "(" ARGS "); return 0;"
		else
			print "\treturn sys_" FUNCNAME "(" ARGS ");"
	}
' < $1 > $4
