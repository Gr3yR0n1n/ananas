TARGET:		kernel

S=		../../../..
ARCH=		amd64

%OBJS
%FILES

CFLAGS=		-m64 -march=athlon64 -mcmodel=large -I$S/../include -I$S -I. -std=c99
kernel.elf:	$(OBJS) $S/conf/ld.amd64
		$(LD) -b elf64-x86-64 -T $S/conf/ld.amd64 -nostdlib -nodefaultlibs -o kernel.elf $(OBJS)

kernel.symbols:	kernel.elf
		nm kernel.elf|awk '{print $$1" "$$3}'|sort > kernel.symbols

#
# Assembly symbols: we need a way to pass symbols to our assembly scripts.
#
asmsyms.o:	$S/arch/${ARCH}/asmsyms.c
		$(CC) $(CFLAGS) -c -o asmsyms.o $S/arch/${ARCH}/asmsyms.c

asmsyms.h:	asmsyms.o $S/tools/gen_asmsyms.sh
		$S/tools/gen_asmsyms.sh asmsyms.o > asmsyms.h

#
# The amd64 kernel uses a small trampoline so get the system running in long
# mode. This works by generating a 'trampoline.o' file which contains a raw
# copy of the kernel's ELF file, which is linked the trampoline.a containing
# the amd64 trampoline code itself...
#
trampoline.o:	kernel.elf $S/tools/file2inc/file2inc
		$S/tools/file2inc/file2inc kernel.elf trampoline.c kernel
		$(CC) -m32 -march=i386 -c -o trampoline.o trampoline.c

kernel:		trampoline.o $S/arch/amd64/trampoline/trampoline.a
		$(LD) -b elf32-i386 -T $S/conf/ld.trampoline.amd64 -o kernel -u __entry trampoline.o $S/arch/amd64/trampoline/trampoline.a

# Necessary tools
$S/tools/file2inc/file2inc:
		(cd $S/tools/file2inc/file2inc && ${MAKE} file2inc)

$S/arch/amd64/trampoline/trampoline.a:
		(cd $S/arch/amd64/trampoline/Makefile && ${MAKE} trampoline.a)

clean:
		rm -f kernel kernel.elf asmsyms.o asmsyms.h $(OBJS)
